"""
Base classes for business events in the blockchain transformer.
"""
from typing import Dict, Any, List, Optional, Union, Set
from datetime import datetime
from abc import ABC

class BusinessEvent(ABC):
    """Base class for all business events generated by transformers."""
    
    event_type: str = "base"
    
    def __init__(self, source_tx: Optional[str] = None, block_number: Optional[int] = None, 
                timestamp: Optional[Any] = None, metadata: Optional[Dict[str, Any]] = None):
        """
        Initialize business event.
        
        Args:
            source_tx: Transaction hash that triggered this event
            block_number: Block number where this event occurred
            timestamp: Timestamp of the block
            metadata: Additional metadata for the event
        """
        self.source_tx = source_tx
        self.block_number = block_number
        self.timestamp = timestamp
        self.metadata = metadata or {}
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert event to dictionary representation."""
        return {
            "event_type": self.event_type,
            "source_tx": self.source_tx,
            "block_number": self.block_number,
            "timestamp": self.timestamp.isoformat() if hasattr(self.timestamp, 'isoformat') else self.timestamp,
            "metadata": self.metadata
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'BusinessEvent':
        """Create event from dictionary representation."""
        return cls(
            source_tx=data.get("source_tx"),
            block_number=data.get("block_number"),
            timestamp=data.get("timestamp"),
            metadata=data.get("metadata", {})
        )
    
    def __str__(self) -> str:
        """String representation of event."""
        return f"{self.event_type.upper()} event from tx {self.source_tx} in block {self.block_number}"


class TradeEvent(BusinessEvent):
    """Business event representing a trade on a DEX."""
    
    event_type = "trade"
    
    def __init__(self, token_in: str, token_out: str, amount_in: str,
                amount_out: str, trader: str, source_tx: Optional[str] = None,
                block_number: Optional[int] = None, timestamp: Optional[Any] = None,
                metadata: Optional[Dict[str, Any]] = None):
        """
        Initialize trade event.
        
        Args:
            token_in: Address of token sold
            token_out: Address of token bought
            amount_in: Amount of tokens sold
            amount_out: Amount of tokens bought
            trader: Address of trader
            source_tx: Transaction hash
            block_number: Block number
            timestamp: Block timestamp
            metadata: Additional metadata
        """
        super().__init__(source_tx, block_number, timestamp, metadata)
        self.token_in = token_in
        self.token_out = token_out
        self.amount_in = amount_in
        self.amount_out = amount_out
        self.trader = trader
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert event to dictionary representation."""
        result = super().to_dict()
        result.update({
            "token_in": self.token_in,
            "token_out": self.token_out,
            "amount_in": str(self.amount_in),
            "amount_out": str(self.amount_out),
            "trader": self.trader
        })
        return result
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TradeEvent':
        """Create event from dictionary representation."""
        return cls(
            token_in=data["token_in"],
            token_out=data["token_out"],
            amount_in=data["amount_in"],
            amount_out=data["amount_out"],
            trader=data["trader"],
            source_tx=data.get("source_tx"),
            block_number=data.get("block_number"),
            timestamp=data.get("timestamp"),
            metadata=data.get("metadata", {})
        )
    
    def __str__(self) -> str:
        """String representation of trade event."""
        return f"TRADE: {self.trader} swapped {self.amount_in} {self.token_in} for {self.amount_out} {self.token_out}"


class LiquidityEvent(BusinessEvent):
    """Business event representing liquidity addition or removal."""
    
    event_type = "liquidity"
    
    def __init__(self, pool: str, token0: str, token1: str, 
                amount0: str, amount1: str, provider: str, 
                is_addition: bool, source_tx: Optional[str] = None,
                block_number: Optional[int] = None, timestamp: Optional[Any] = None,
                metadata: Optional[Dict[str, Any]] = None):
        """
        Initialize liquidity event.
        
        Args:
            pool: Address of liquidity pool
            token0: Address of first token
            token1: Address of second token
            amount0: Amount of first token
            amount1: Amount of second token
            provider: Address of liquidity provider
            is_addition: True if adding liquidity, False if removing
            source_tx: Transaction hash
            block_number: Block number
            timestamp: Block timestamp
            metadata: Additional metadata
        """
        super().__init__(source_tx, block_number, timestamp, metadata)
        self.pool = pool
        self.token0 = token0
        self.token1 = token1
        self.amount0 = amount0
        self.amount1 = amount1
        self.provider = provider
        self.is_addition = is_addition
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert event to dictionary representation."""
        result = super().to_dict()
        result.update({
            "pool": self.pool,
            "token0": self.token0,
            "token1": self.token1,
            "amount0": str(self.amount0),
            "amount1": str(self.amount1),
            "provider": self.provider,
            "is_addition": self.is_addition
        })
        return result
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'LiquidityEvent':
        """Create event from dictionary representation."""
        return cls(
            pool=data["pool"],
            token0=data["token0"],
            token1=data["token1"],
            amount0=data["amount0"],
            amount1=data["amount1"],
            provider=data["provider"],
            is_addition=data["is_addition"],
            source_tx=data.get("source_tx"),
            block_number=data.get("block_number"),
            timestamp=data.get("timestamp"),
            metadata=data.get("metadata", {})
        )
    
    def __str__(self) -> str:
        """String representation of liquidity event."""
        action = "ADDED" if self.is_addition else "REMOVED"
        return f"LIQUIDITY {action}: {self.provider} {action.lower()} {self.amount0} {self.token0} and {self.amount1} {self.token1} to/from {self.pool}"


class TransferEvent(BusinessEvent):
    """Business event representing a token transfer."""
    
    event_type = "transfer"
    
    def __init__(self, token: str, from_address: str, to_address: str, 
                amount: str, source_tx: Optional[str] = None,
                block_number: Optional[int] = None, timestamp: Optional[Any] = None,
                metadata: Optional[Dict[str, Any]] = None):
        """
        Initialize transfer event.
        
        Args:
            token: Address of token transferred
            from_address: Address tokens were sent from
            to_address: Address tokens were sent to
            amount: Amount of tokens transferred
            source_tx: Transaction hash
            block_number: Block number
            timestamp: Block timestamp
            metadata: Additional metadata
        """
        super().__init__(source_tx, block_number, timestamp, metadata)
        self.token = token
        self.from_address = from_address
        self.to_address = to_address
        self.amount = amount
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert event to dictionary representation."""
        result = super().to_dict()
        result.update({
            "token": self.token,
            "from_address": self.from_address,
            "to_address": self.to_address,
            "amount": str(self.amount)
        })
        return result
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TransferEvent':
        """Create event from dictionary representation."""
        return cls(
            token=data["token"],
            from_address=data["from_address"],
            to_address=data["to_address"],
            amount=data["amount"],
            source_tx=data.get("source_tx"),
            block_number=data.get("block_number"),
            timestamp=data.get("timestamp"),
            metadata=data.get("metadata", {})
        )
    
    def __str__(self) -> str:
        """String representation of transfer event."""
        return f"TRANSFER: {self.from_address} sent {self.amount} {self.token} to {self.to_address}"