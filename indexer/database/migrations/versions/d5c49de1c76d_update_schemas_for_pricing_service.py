"""Update schemas for pricing service

Revision ID: d5c49de1c76d
Revises: 5acae576a934
Create Date: 2025-07-16 01:08:36.839908

"""
from alembic import op
import sqlalchemy as sa
from indexer.database.types import EvmAddressType
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd5c49de1c76d'
down_revision = '5acae576a934'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('price_vwap',
    sa.Column('time', sa.TIMESTAMP(), nullable=False),
    sa.Column('asset', EvmAddressType(), nullable=False),
    sa.Column('denom', sa.Text(), nullable=False),
    sa.Column('base_volume', sa.NUMERIC(precision=30, scale=8), nullable=False),
    sa.Column('quote_volume', sa.NUMERIC(precision=30, scale=8), nullable=False),
    sa.Column('price_period', sa.NUMERIC(precision=20, scale=8), nullable=False),
    sa.Column('price_vwap', sa.NUMERIC(precision=20, scale=8), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('time', 'asset', 'denom')
    )
    op.create_index('idx_price_vwap_asset', 'price_vwap', ['asset'], unique=False)
    op.create_index('idx_price_vwap_asset_time', 'price_vwap', ['asset', 'time'], unique=False)
    op.create_index('idx_price_vwap_time', 'price_vwap', ['time'], unique=False)
    op.create_index('idx_price_vwap_time_desc', 'price_vwap', ['time'], unique=False, postgresql_using='btree', postgresql_ops={'time': 'DESC'})
    op.add_column('addresses', sa.Column('address_type', sa.String(length=50), nullable=True))
    op.alter_column('addresses', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('addresses', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('addresses', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(op.f('addresses_address_key'), 'addresses', type_='unique')
    op.drop_index(op.f('idx_addresses_grouping'), table_name='addresses')
    op.drop_index(op.f('idx_addresses_project'), table_name='addresses')
    op.drop_index(op.f('idx_addresses_type'), table_name='addresses')
    op.create_index('idx_addresses_type', 'addresses', ['address_type'], unique=False)
    op.create_index(op.f('ix_addresses_address'), 'addresses', ['address'], unique=False)
    op.drop_column('addresses', 'tags')
    op.drop_column('addresses', 'type')
    op.drop_column('addresses', 'project')
    op.drop_column('addresses', 'grouping')
    op.add_column('block_prices', sa.Column('created_at', sa.TIMESTAMP(), nullable=False))
    op.add_column('block_prices', sa.Column('updated_at', sa.TIMESTAMP(), nullable=False))
    op.drop_index(op.f('idx_block_prices_fetched_at'), table_name='block_prices')
    op.drop_column('block_prices', 'fetched_at')
    op.drop_column('block_prices', 'chainlink_round_id')
    op.drop_column('block_prices', 'chainlink_updated_at')
    op.add_column('contracts', sa.Column('base_token_address', EvmAddressType(), nullable=True))
    op.alter_column('contracts', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('contracts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('contracts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(op.f('contracts_address_key'), 'contracts', type_='unique')
    op.create_index(op.f('ix_contracts_address'), 'contracts', ['address'], unique=True)
    op.drop_column('contracts', 'quote_token_address')
    op.add_column('model_contracts', sa.Column('updated_at', sa.TIMESTAMP(), nullable=False))
    op.alter_column('model_contracts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.add_column('model_sources', sa.Column('updated_at', sa.TIMESTAMP(), nullable=False))
    op.alter_column('model_sources', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.add_column('model_tokens', sa.Column('updated_at', sa.TIMESTAMP(), nullable=False))
    op.alter_column('model_tokens', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.add_column('models', sa.Column('target_asset', EvmAddressType(), nullable=True))
    op.alter_column('models', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('models', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('models', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(op.f('models_database_name_key'), 'models', type_='unique')
    op.drop_column('models', 'database_name')
    op.drop_column('models', 'display_name')
    op.drop_column('models', 'source_paths')
    op.add_column('periods', sa.Column('created_at', sa.TIMESTAMP(), nullable=False))
    op.add_column('periods', sa.Column('updated_at', sa.TIMESTAMP(), nullable=False))
    op.alter_column('periods', 'period_type',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.Enum('ONE_MINUTE', 'FIVE_MINUTES', 'ONE_HOUR', 'FOUR_HOURS', 'ONE_DAY', name='periodtype', native_enum=False),
               existing_nullable=False)
    op.create_index(op.f('ix_periods_time_close'), 'periods', ['time_close'], unique=False)
    op.add_column('pool_pricing_configs', sa.Column('updated_at', sa.TIMESTAMP(), nullable=False))
    op.alter_column('pool_pricing_configs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_column('pool_pricing_configs', 'notes')
    op.drop_column('pool_pricing_configs', 'quote_token_address')
    op.drop_column('pool_pricing_configs', 'created_by')
    op.add_column('sources', sa.Column('source_type', sa.String(length=50), nullable=False))
    op.add_column('sources', sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('sources', sa.Column('updated_at', sa.TIMESTAMP(), nullable=False))
    op.alter_column('sources', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('sources', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_sources_name'), 'sources', ['name'], unique=False)
    op.drop_column('sources', 'format')
    op.alter_column('tokens', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('tokens', 'symbol',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               nullable=False)
    op.alter_column('tokens', 'decimals',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('tokens', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('tokens', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('tokens', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(op.f('tokens_address_key'), 'tokens', type_='unique')
    op.create_index(op.f('ix_tokens_address'), 'tokens', ['address'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tokens_address'), table_name='tokens')
    op.create_unique_constraint(op.f('tokens_address_key'), 'tokens', ['address'])
    op.alter_column('tokens', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('tokens', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('tokens', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('tokens', 'decimals',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tokens', 'symbol',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('tokens', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.add_column('sources', sa.Column('format', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_sources_name'), table_name='sources')
    op.alter_column('sources', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('sources', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.drop_column('sources', 'updated_at')
    op.drop_column('sources', 'configuration')
    op.drop_column('sources', 'source_type')
    op.add_column('pool_pricing_configs', sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('pool_pricing_configs', sa.Column('quote_token_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True))
    op.add_column('pool_pricing_configs', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.alter_column('pool_pricing_configs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('pool_pricing_configs', 'updated_at')
    op.drop_index(op.f('ix_periods_time_close'), table_name='periods')
    op.alter_column('periods', 'period_type',
               existing_type=sa.Enum('ONE_MINUTE', 'FIVE_MINUTES', 'ONE_HOUR', 'FOUR_HOURS', 'ONE_DAY', name='periodtype', native_enum=False),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.drop_column('periods', 'updated_at')
    op.drop_column('periods', 'created_at')
    op.add_column('models', sa.Column('source_paths', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('models', sa.Column('display_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('models', sa.Column('database_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.create_unique_constraint(op.f('models_database_name_key'), 'models', ['database_name'])
    op.alter_column('models', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('models', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('models', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.drop_column('models', 'target_asset')
    op.alter_column('model_tokens', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('model_tokens', 'updated_at')
    op.alter_column('model_sources', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('model_sources', 'updated_at')
    op.alter_column('model_contracts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('model_contracts', 'updated_at')
    op.add_column('contracts', sa.Column('quote_token_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_contracts_address'), table_name='contracts')
    op.create_unique_constraint(op.f('contracts_address_key'), 'contracts', ['address'])
    op.alter_column('contracts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('contracts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('contracts', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.drop_column('contracts', 'base_token_address')
    op.add_column('block_prices', sa.Column('chainlink_updated_at', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('block_prices', sa.Column('chainlink_round_id', sa.NUMERIC(precision=20, scale=0), autoincrement=False, nullable=True))
    op.add_column('block_prices', sa.Column('fetched_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.create_index(op.f('idx_block_prices_fetched_at'), 'block_prices', ['fetched_at'], unique=False)
    op.drop_column('block_prices', 'updated_at')
    op.drop_column('block_prices', 'created_at')
    op.add_column('addresses', sa.Column('grouping', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('addresses', sa.Column('project', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('addresses', sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('addresses', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_addresses_address'), table_name='addresses')
    op.drop_index('idx_addresses_type', table_name='addresses')
    op.create_index(op.f('idx_addresses_type'), 'addresses', ['type'], unique=False)
    op.create_index(op.f('idx_addresses_project'), 'addresses', ['project'], unique=False)
    op.create_index(op.f('idx_addresses_grouping'), 'addresses', ['grouping'], unique=False)
    op.create_unique_constraint(op.f('addresses_address_key'), 'addresses', ['address'])
    op.alter_column('addresses', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('addresses', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('addresses', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.drop_column('addresses', 'address_type')
    op.drop_index('idx_price_vwap_time_desc', table_name='price_vwap', postgresql_using='btree', postgresql_ops={'time': 'DESC'})
    op.drop_index('idx_price_vwap_time', table_name='price_vwap')
    op.drop_index('idx_price_vwap_asset_time', table_name='price_vwap')
    op.drop_index('idx_price_vwap_asset', table_name='price_vwap')
    op.drop_table('price_vwap')
    # ### end Alembic commands ###
