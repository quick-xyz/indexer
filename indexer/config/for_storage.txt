    def format_rpc_block_path(self, block_number):
        """Format a raw block path with the given block number."""
        format_str = self.get_rpc_block_path_format()

        # Check if the format has multiple placeholders (for quicknode format)
        if format_str.count('{}') > 1 or '{:' in format_str:
            # For quicknode format with padding, pass the same block number twice
            return f"{self.get_rpc_prefix()}{format_str.format(block_number, block_number)}"
        else:
            # For standard format
            return f"{self.get_rpc_prefix()}{format_str.format(block_number)}"

    def format_raw_block_path(self, block_number):
        """Format a raw block path with the given block number."""
        format_str = self.get_raw_block_path_format()
        return f"{self.get_rpc_prefix()}{format_str.format(block_number)}"

    def format_decoded_block_path(self, block_number):
        """Format a decoded block path with the given block number."""
        format_str = self.get_decoded_block_path_format()
        return f"{self.get_decoded_prefix()}{format_str.format(block_number)}"

    def extract_block_number(self, path):
        """Extract block number from a block path."""
        # Get prefixes for comparison
        raw_prefix = self.get_rpc_prefix()
        decoded_prefix = self.get_decoded_prefix()
        
        try:
            # Strip prefix if present
            if path.startswith(raw_prefix):
                filename = path[len(raw_prefix):]
            elif path.startswith(decoded_prefix):
                filename = path[len(decoded_prefix):]
            else:
                filename = path.split('/')[-1]  # Just use the filename part
            
            # Try common patterns in order of specificity
            
            # Pattern 1: Standard block_{number}.json
            match = re.search(r"block_(\d+)\.json", filename)
            if match:
                return int(match.group(1))
                
            # Pattern 2: QuickNode format with padded numbers
            match = re.search(r"quicknode.*_(\d+)-\d+\.json", filename)
            if match:
                return int(match.group(1))
                
            # Pattern 3: Just the number itself (for simpler formats)
            match = re.search(r"(\d+)\.json$", filename)
            if match:
                return int(match.group(1))
                
            # Last resort: Try to find any sequence of digits in the filename
            match = re.search(r"_(\d+)[^0-9]", filename)
            if match:
                return int(match.group(1))
                
        except Exception as e:
            self.logger.error(f"Failed to extract block number from {path}: {e}")
        
        raise ValueError(f"Could not extract block number from path: {path}")
