# indexer/cli/commands/migrate.py

"""
Database Migration CLI Commands

Integrates MigrationManager into the unified CLI system.
"""

import click
import json
from typing import Optional
from pathlib import Path

@click.group()
def migrate():
    """Database migration management"""
    pass


@migrate.group()
def shared():
    """Shared database migration commands"""
    pass


@shared.command('create')
@click.argument('message')
@click.option('--manual', is_flag=True, help='Create empty migration (no autogenerate)')
@click.pass_context
def create_shared(ctx, message: str, manual: bool):
    """Create a new shared database migration
    
    Examples:
        # Create autogenerated migration
        migrate shared create "Add pool pricing configs"
        
        # Create empty migration for manual SQL
        migrate shared create "Custom data migration" --manual
    """
    cli_context = ctx.obj['cli_context']
    
    try:
        manager = cli_context.get_migration_manager()
        revision = manager.create_shared_migration(message, autogenerate=not manual)
        click.echo(f"‚úÖ Created migration {revision}: {message}")
        
    except Exception as e:
        click.echo(f"‚ùå Failed to create migration: {e}", err=True)
        raise click.Abort()


@shared.command('upgrade')
@click.option('--revision', default='head', help='Target revision (default: head)')
@click.pass_context
def upgrade_shared(ctx, revision: str):
    """Upgrade shared database
    
    Examples:
        # Upgrade to latest
        migrate shared upgrade
        
        # Upgrade to specific revision
        migrate shared upgrade --revision abc123
    """
    cli_context = ctx.obj['cli_context']
    
    try:
        manager = cli_context.get_migration_manager()
        manager.upgrade_shared(revision)
        click.echo(f"‚úÖ Shared database upgraded to {revision}")
        
    except Exception as e:
        click.echo(f"‚ùå Failed to upgrade: {e}", err=True)
        raise click.Abort()


@shared.command('downgrade')
@click.argument('revision')
@click.pass_context
def downgrade_shared(ctx, revision: str):
    """Downgrade shared database
    
    Examples:
        # Downgrade to specific revision
        migrate shared downgrade abc123
        
        # Downgrade one step
        migrate shared downgrade -1
    """
    cli_context = ctx.obj['cli_context']
    
    try:
        manager = cli_context.get_migration_manager()
        manager.downgrade_shared(revision)
        click.echo(f"‚úÖ Shared database downgraded to {revision}")
        
    except Exception as e:
        click.echo(f"‚ùå Failed to downgrade: {e}", err=True)
        raise click.Abort()


@shared.command('current')
@click.pass_context
def current_shared(ctx):
    """Show current shared database revision"""
    cli_context = ctx.obj['cli_context']
    
    try:
        manager = cli_context.get_migration_manager()
        revision = manager.get_shared_current_revision()
        
        if revision:
            click.echo(f"Current revision: {revision}")
        else:
            click.echo("No migrations applied")
            
    except Exception as e:
        click.echo(f"‚ùå Failed to get current revision: {e}", err=True)
        raise click.Abort()


@migrate.group()
def model():
    """Model database management commands"""
    pass


@model.command('create')
@click.argument('model_name')
@click.option('--drop-if-exists', is_flag=True, help='Drop database if it already exists')
@click.pass_context
def create_model(ctx, model_name: str, drop_if_exists: bool):
    """Create a new model database from template
    
    Examples:
        # Create new model database
        migrate model create blub_test_v2
        
        # Recreate existing database
        migrate model create blub_test --drop-if-exists
    """
    cli_context = ctx.obj['cli_context']
    
    try:
        manager = cli_context.get_migration_manager()
        success = manager.create_model_database(model_name, drop_if_exists=drop_if_exists)
        
        if success:
            click.echo(f"‚úÖ Model database '{model_name}' created successfully")
        else:
            click.echo(f"‚ö†Ô∏è  Model database '{model_name}' already exists. Use --drop-if-exists to overwrite.")
            
    except Exception as e:
        click.echo(f"‚ùå Failed to create model database: {e}", err=True)
        raise click.Abort()


@model.command('recreate')
@click.argument('model_name')
@click.pass_context
def recreate_model(ctx, model_name: str):
    """Drop and recreate model database with current template
    
    Examples:
        # Recreate model database
        migrate model recreate blub_test
    """
    cli_context = ctx.obj['cli_context']
    
    click.echo(f"‚ö†Ô∏è  This will destroy all data in database '{model_name}'")
    if not click.confirm("Are you sure you want to continue?"):
        click.echo("Operation cancelled")
        return
    
    try:
        manager = cli_context.get_migration_manager()
        manager.recreate_model_database(model_name)
        click.echo(f"‚úÖ Model database '{model_name}' recreated successfully")
        
    except Exception as e:
        click.echo(f"‚ùå Failed to recreate model database: {e}", err=True)
        raise click.Abort()


@model.command('schema')
@click.pass_context
def show_model_schema(ctx):
    """Show current model database schema template
    
    Examples:
        # Display current schema
        migrate model schema
    """
    cli_context = ctx.obj['cli_context']
    
    try:
        manager = cli_context.get_migration_manager()
        schema_sql = manager.get_model_schema_sql()
        
        click.echo("Current model database schema:")
        click.echo("=" * 50)
        click.echo(schema_sql)
        
    except Exception as e:
        click.echo(f"‚ùå Failed to generate schema: {e}", err=True)
        raise click.Abort()


@migrate.command('status')
@click.pass_context
def migration_status(ctx):
    """Show current status of all databases
    
    Examples:
        # Show status of all databases
        migrate status
    """
    cli_context = ctx.obj['cli_context']
    
    try:
        manager = cli_context.get_migration_manager()
        status = manager.current_status()
        
        click.echo("Database Migration Status")
        click.echo("=" * 50)
        
        # Shared database status
        shared = status['shared']
        click.echo(f"\nüìä Shared Database:")
        if shared['exists']:
            click.echo(f"   Status: ‚úÖ Exists")
            if shared.get('current_revision'):
                click.echo(f"   Current Revision: {shared['current_revision']}")
            else:
                click.echo(f"   Current Revision: None (no migrations applied)")
        else:
            click.echo(f"   Status: ‚ùå Does not exist")
        
        if shared.get('error'):
            click.echo(f"   Error: {shared['error']}")
        
        # Model databases status
        models = status['models']
        click.echo(f"\nüìä Model Databases ({len(models)} found):")
        
        if not models:
            click.echo("   No model databases found")
        else:
            for model_name, model_status in models.items():
                schema_status = "‚úÖ Current" if model_status['schema_current'] else "‚ö†Ô∏è  Outdated"
                click.echo(f"   {model_name}: {schema_status}")
        
    except Exception as e:
        click.echo(f"‚ùå Failed to get status: {e}", err=True)
        raise click.Abort()


@migrate.command('reset')
@click.confirmation_option(prompt='‚ö†Ô∏è  This will DELETE ALL DATA in all databases. Are you sure?')
@click.pass_context
def reset_all(ctx):
    """Reset all databases (DEVELOPMENT ONLY)
    
    Examples:
        # Reset everything for clean development
        migrate reset
    """
    cli_context = ctx.obj['cli_context']
    
    try:
        manager = cli_context.get_migration_manager()
        manager.reset_everything()
        click.echo("‚úÖ All databases have been reset")
        
    except Exception as e:
        click.echo(f"‚ùå Failed to reset databases: {e}", err=True)
        raise click.Abort()


# Convenience commands for common workflows
@migrate.group()
def dev():
    """Development workflow commands"""
    pass


@dev.command('setup')
@click.argument('model_name')
@click.pass_context
def dev_setup(ctx, model_name: str):
    """Complete development setup: create shared DB + model DB
    
    Examples:
        # Setup development environment
        migrate dev setup blub_test
    """
    cli_context = ctx.obj['cli_context']
    
    click.echo(f"üöÄ Setting up development environment for model: {model_name}")
    
    try:
        manager = cli_context.get_migration_manager()
        
        # Upgrade shared database
        click.echo("1Ô∏è‚É£  Setting up shared database...")
        manager.upgrade_shared()
        click.echo("   ‚úÖ Shared database ready")
        
        # Create model database
        click.echo("2Ô∏è‚É£  Creating model database...")
        success = manager.create_model_database(model_name, drop_if_exists=True)
        if success:
            click.echo(f"   ‚úÖ Model database '{model_name}' ready")
        
        click.echo(f"\nüéâ Development environment ready!")
        click.echo(f"   Shared DB: indexer_shared")
        click.echo(f"   Model DB: {model_name}")
        
    except Exception as e:
        click.echo(f"‚ùå Setup failed: {e}", err=True)
        raise click.Abort()


@dev.command('clean')
@click.pass_context
def dev_clean(ctx):
    """Clean slate: reset everything for fresh development
    
    Examples:
        # Clean everything for fresh start
        migrate dev clean
    """
    cli_context = ctx.obj['cli_context']
    
    click.echo("üßπ Preparing clean development environment...")
    
    if not click.confirm("‚ö†Ô∏è  This will delete ALL database data. Continue?"):
        click.echo("Operation cancelled")
        return
    
    try:
        manager = cli_context.get_migration_manager()
        manager.reset_everything()
        click.echo("‚úÖ Clean slate ready for development")
        
    except Exception as e:
        click.echo(f"‚ùå Clean operation failed: {e}", err=True)
        raise click.Abort()